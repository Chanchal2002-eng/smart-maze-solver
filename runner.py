{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████| 1000/1000 [00:56<00:00, 17.83it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| finished   | algo   |    seconds |   n_explored |   length_path |   count |\n",
      "|:-----------|:-------|-----------:|-------------:|--------------:|--------:|\n",
      "| False      | A-star | 0.0131737  |      560.575 |       nan     |     409 |\n",
      "| False      | BFS    | 0.00811656 |      560.575 |       nan     |     409 |\n",
      "| False      | DFS    | 0.00814402 |      560.575 |       nan     |     409 |\n",
      "| True       | A-star | 0.0200296  |      894.748 |       104.247 |     591 |\n",
      "| True       | BFS    | 0.0229896  |     1730.84  |       104.247 |     591 |\n",
      "| True       | DFS    | 0.0127773  |      954.056 |       277.607 |     591 |\n"
     ]
    }
   ],
   "source": [
    "from collections import namedtuple\n",
    "from functools import partial\n",
    "from timeit import default_timer as timer\n",
    "import matplotlib.animation as ani\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.animation import FuncAnimation, PillowWriter \n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import networkx\n",
    "\n",
    "from algos import bfs, dfs, astar, manhattan_heuristic\n",
    "from maze import create_maze\n",
    "from plotting import Plotter\n",
    "import tabulate\n",
    "import tqdm\n",
    "import PIL\n",
    "import os\n",
    "\n",
    "from matplotlib import rcParams\n",
    "\n",
    "rcParams['animation.convert_path'] = r'/usr/bin/convert'\n",
    "\n",
    "np.random.seed(0)\n",
    "\n",
    "SIZE = 100\n",
    "START = (0, 0)\n",
    "GOAL = (SIZE - 1, SIZE - 1)\n",
    "OBSTACLE_COUNT = SIZE ** 2 // 30\n",
    "OBSTACLE_SIZE = 7\n",
    "\n",
    "ALGOS = [\n",
    "    (\"DFS\", partial(dfs, start=START, goal=GOAL)),\n",
    "    (\"BFS\", partial(bfs, start=START, goal=GOAL)),\n",
    "    (\n",
    "        \"A-star\",\n",
    "        partial(astar, start=START, goal=GOAL, heuristic=manhattan_heuristic(SIZE)),\n",
    "    ),\n",
    "]\n",
    "\n",
    "Result = namedtuple(\n",
    "    \"Result\", [\"round\", \"finished\", \"n_explored\", \"length_path\", \"seconds\", \"algo\"]\n",
    ")\n",
    "\n",
    "\n",
    "def simulate(n, max_good_mazes=float(\"inf\")):\n",
    "    results = []\n",
    "    good_mazes = []\n",
    "    for i in tqdm.tqdm(range(n), mininterval=1):\n",
    "        maze = create_maze(SIZE, OBSTACLE_COUNT, OBSTACLE_SIZE)\n",
    "        for algo_name, algo in ALGOS:\n",
    "            time_start = timer()\n",
    "            finished, explored_nodes, path = algo(maze)\n",
    "            time_end = timer()\n",
    "            r = Result(\n",
    "                round=i,\n",
    "                finished=finished,\n",
    "                n_explored=len(explored_nodes),\n",
    "                length_path=None if not finished else len(path),\n",
    "                seconds=time_end - time_start,\n",
    "                algo=algo_name,\n",
    "            )\n",
    "            results.append(r)\n",
    "            if finished and algo_name == ALGOS[0][0]:\n",
    "                good_mazes.append(maze)\n",
    "                if len(good_mazes) >= max_good_mazes:\n",
    "                    break\n",
    "\n",
    "    results_df = pd.DataFrame(results)\n",
    "    return results_df, good_mazes\n",
    "\n",
    "\n",
    "def create_animation(title, algo, maze):\n",
    "    finished, explored, path = algo(maze)\n",
    "    assert finished, \"goal not reachable\"\n",
    "\n",
    "    plotter = Plotter(\n",
    "        maze, explored, path, frame_skip_path=8, frame_skip_search=32, end_frames=120\n",
    "    )\n",
    "\n",
    "    plotter.init_fig(title)\n",
    "\n",
    "    anim = ani.FuncAnimation(\n",
    "        plotter.fig,\n",
    "        plotter.anim_fn,\n",
    "        init_func=plotter.init_fn,\n",
    "        frames=plotter.total_frames,\n",
    "        interval=1,\n",
    "        repeat=True,\n",
    "    )\n",
    "    return anim\n",
    "\n",
    "\n",
    "result_df, good_mazes = simulate(1000)\n",
    "\n",
    "result_agg = result_df.groupby([\"finished\", \"algo\"])[\n",
    "    \"seconds\", \"n_explored\", \"length_path\"\n",
    "].mean()\n",
    "\n",
    "result_agg[\"count\"] = result_df.groupby([\"finished\", \"algo\"]).size()\n",
    "result_agg = result_agg.reset_index()\n",
    "\n",
    "print(tabulate.tabulate(result_agg.values, result_agg.columns, tablefmt=\"pipe\"))\n",
    "\n",
    "output_path = \"_files/anim3\"\n",
    "os.makedirs(output_path, exist_ok=True)\n",
    "\n",
    "for algo_name, algo in ALGOS:\n",
    "    anim = create_animation(algo_name, algo, good_mazes[0])\n",
    "    anim.save('my1.gif', writer='pillow', fps=30)\n",
    "\n",
    "    plt.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
